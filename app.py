# -*- coding: utf-8 -*-
"""Chronic_Disease_AI_Agent.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cnZBtTBKYujeiu8MbuZ4PPZBcPph9prR
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.ensemble import RandomForestClassifier

import warnings
warnings.filterwarnings('ignore')

# If from Kaggle
!pip install kaggle
from google.colab import files
files.upload()  # Upload your kaggle.json

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d uciml/pima-indians-diabetes-database
!unzip pima-indians-diabetes-database.zip

import pandas as pd

# Load dataset
df = pd.read_csv("diabetes.csv")

# Preview the first few rows
df.head()

df.info()
df.describe()
df.isnull().sum()
sns.heatmap(df.corr(), annot=True)

X = df.drop("Outcome", axis=1)
y = df["Outcome"]

# Keep column names in scaled version
scaler = StandardScaler()
X_train = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)

X_train, X_test, y_train, y_test = train_test_split(
    X_train, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

importances = model.feature_importances_
features = X.columns
plt.barh(features, importances)
plt.xlabel("Feature Importance")
plt.title("Top Features for Prediction")
plt.show()

!pip install shap
import shap

# Modern explainer
explainer = shap.Explainer(model, X_train)

# Compute SHAP values (disable additivity check)
shap_values = explainer(X_train, check_additivity=False)

# Plot summary
shap.summary_plot(shap_values, X_train)

def health_recommendation(pred):
    if pred == 1:
        return "⚠️ Risk Detected: Maintain healthy diet, exercise regularly, consult a doctor."
    else:
        return "✅ Low risk. Continue healthy lifestyle."

# Try on one test sample
sample = X_test.iloc[0].values.reshape(1, -1)
pred = model.predict(sample)[0]
print(health_recommendation(pred))

!pip install gradio

import gradio as gr

def predict_diabetes(Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin,
                     BMI, DiabetesPedigreeFunction, Age):
    data = [[Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin,
             BMI, DiabetesPedigreeFunction, Age]]
    scaled = scaler.transform(data)
    pred = model.predict(scaled)[0]
    advice = health_recommendation(pred)
    return advice

inputs = [
    gr.Number(label="Pregnancies"),
    gr.Number(label="Glucose"),
    gr.Number(label="Blood Pressure"),
    gr.Number(label="Skin Thickness"),
    gr.Number(label="Insulin"),
    gr.Number(label="BMI"),
    gr.Number(label="Diabetes Pedigree Function"),
    gr.Number(label="Age")
]

gr.Interface(fn=predict_diabetes, inputs=inputs, outputs="text",
             title="Chronic Disease Prediction AI").launch()